<!-- Contributed by David Bau, in the public domain -->

<template>
<div class="vectorlist">
  <div v-for="(vector, index) in vectors" class="vector">
    <input v-model="vector.text">
    <button @click="selectVector(index)">&rarr;</button>
    <button @click="deleteVector(index)">x</button>
  </div>

  <div class="operation">
  <button @click="saveVector()">Save current sample</button>
  </div>
  <div class="operation">
  <!-- TODO: Change this button to do something interesting -->
  <button @click="applyVectorMath()">Apply vector math</button>
  </div>
  <!-- TODO: Add the KNN font ID button below -->
  
  <button @click="getKNN()">Find Nearest Neighbors</button>
    
  <button @click="averageFont()">Find Average Font</button>

  <button @click="applyBoldingVector()">Apply Bolding Vector</button>

  <button @click="applyFatFont()">Apply Fat Vector</button>

  <button @click="applyThinAverageFont()">Apply Thin Average Vector</button>

  <button @click="applyBoldAverageFont()">Apply Bold Average Vector</button>

  <button @click="applyBoldNoBoldAverage()">Apply Bold/No-Bold Average Vector</button>

  <button @click="applyLowerCase()">Apply Lower Case Vector</button>

  <button @click="applyFavoriteFont()">Apply Favourite Font</button>


</div>
</template>

<script>
import {Array1D, ENV} from 'deeplearn';

const math = ENV.math;

//This json file includes all of the Font IDs in our database and their 40-dimensional logits vector.
var json = require('../embeddings.json');

export default {
  props: {
    selectedSample: { },
    model: { },
    vectors: { type: Array, default: () => [ { text: "0" } ] }
  },
  methods: {
    saveVector() {
      this.selectedSample.data().then(x =>
         this.vectors.push({ text: Array.prototype.slice.call(x).join(',') })
      );
    },
    deleteVector(index) {
      this.vectors.splice(index, 1);
    },
    selectVector(index) {
      this.$emit("select", { selectedSample: this.model.fixdim(
           Array1D.new(this.vectors[index].text.split(',').map(parseFloat)))});
    },
    // TODO: Add useful vector space operations here -->
    applyVectorMath() {
      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))) } )
    },

    //TODO: Implement getKNN to output the font ID of the nearest neighbor

    getKNN() {
      let highestScore = 0;
      let font = 0;
      this.selectedSample.data().then(vectors => {
      
      let allFonts = json;
      for(let i = 0; i < allFonts.length; i++) {
        let cosineSim = this.getCosineSimilarity(allFonts[i],vectors)
        if(cosineSim > highestScore){
          highestScore = cosineSim;
          font = i;
        }
      }

      console.log('Best Font ID:');
      console.log(font);
      console.log('Best Font Cosine Score:');
      console.log(highestScore);
      });

    },

    getCosineSimilarity(innerLoop,vector) {
        let dotProduct = 0;
        let v1Norm = 0;
        let v2Norm = 0;
        for(let j = 0; j < innerLoop.length; j++) {
          dotProduct += innerLoop[j] * vector[j];
          v1Norm += innerLoop[j] * innerLoop[j];
          v2Norm += vector[j] * vector[j];
        }

        let cosineSim = (Math.abs(dotProduct))/(Math.sqrt(v1Norm) * Math.sqrt(v2Norm));

        return cosineSim;

    },

    averageFont() {
      let averageFont = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

      let allFonts = json; 
      for(let i = 0; i < allFonts.length; i++) {
        for(let j = 0; j < allFonts[i].length; j++) {

          averageFont[j] += allFonts[i][j]
        }
      }

      for(let j = 0; j < averageFont.length; j++) {
        averageFont[j] = averageFont[j]/allFonts.length;
      }

      console.log("Average Font", averageFont);
      console.log("Average Font Nearest Neighbors")
      this.getKNN();
    },


    applyFavoriteFont() {
      let sample1 = [-0.12936553359031677, 0.2209666520357132, 0.11505094170570374, 0.10378386080265045, 0.11373673379421234, 0.09057585150003433, 0.012278498150408268, -0.1893712431192398, 0.0966632217168808, -0.11990825831890106, -0.0003910886589437723, -0.052722249180078506, -0.1084696501493454, -0.1455717533826828, -0.12742048501968384, 0.06485357880592346, 0.15602822601795197, -0.027228597551584244, -0.02204817533493042, 0.06851743161678314, -0.05314035341143608, -0.01022757962346077, -0.08550062030553818, -0.03191384673118591, -0.02576892077922821, -0.05184236168861389, -0.0717269778251648, 0.10413258522748947, 0.021855998784303665, 0.07859355211257935, -0.07580546289682388, -0.15288105607032776, -0.009026133455336094, 0.17257604002952576, -0.06360860913991928, -0.1448260247707367, -0.08107823133468628, -0.04873581975698471, -0.089249387383461, 0.11254765838384628];

      let sample2 = [-0.04958507791161537, 0.08402145653963089, -0.08224945515394211, 0.0006332506891340017, -0.1134461835026741, -0.06475473195314407, -0.006402673665434122, 0.16196511685848236, -0.03167298436164856, 0.015037624165415764, 0.08847247064113617, 0.03552836552262306, 0.12930376827716827, -0.12286930531263351, 0.006623149383813143, 0.03601101413369179, -0.06401000171899796, -0.003552971640601754, 0.03551694005727768, -0.10655052959918976, 0.013650454580783844, 0.04462326690554619, 0.015513427555561066, 0.08269008249044418, -0.021461796015501022, 0.23035506904125214, 0.09554454684257507, 0.016699006780982018, -0.02490883320569992, -0.11053585261106491, 0.048835452646017075, -0.11086989939212799, -0.15637320280075073, 0.005489582661539316, -0.03260157257318497, 0.06951151043176651, 0.04012488201260567, -0.06469836086034775, -0.11563423275947571, 0.002668652217835188];

      let sample3 = [0.03451742231845856, 0.036691032350063324, -0.02927248179912567, 0.13692635297775269, -0.022440170869231224, 0.0934191644191742, -0.033454086631536484, 0.154612734913826, 0.043935902416706085, -0.042796894907951355, 0.03914761170744896, 0.07763156294822693, 0.09973987191915512, -0.03775684908032417, -0.03513982519507408, -0.13806270062923431, -0.005571702960878611, -0.0054252492263913155, -0.04213373363018036, -0.09621123969554901, 0.06262914091348648, -0.17134222388267517, 0.02342335693538189, -0.022163094952702522, 0.0078112962655723095, 0.15712641179561615, 0.09303262084722519, -0.11712238192558289, -0.025578271597623825, -0.01571178436279297, 0.028113964945077896, -0.023937582969665527, -0.04347589239478111, 0.02108759805560112, -0.03699739649891853, -0.057840745896101, 0.007272669114172459, -0.0005879079108126462, -0.11697738617658615, -0.052409492433071136];

      let sample4 = [0.03144058212637901, 0.047308992594480515, -0.009735830128192902, -0.006016602739691734, 0.025481529533863068, -0.04458629712462425, 0.11674623936414719, 0.0075994995422661304, -0.056510452181100845, 0.03361007198691368, -0.135185107588768, -0.02498132549226284, 0.09895352274179459, 0.008126208558678627, 0.09927619248628616, -0.07953047752380371, -0.08079538494348526, -0.037232547998428345, -0.053685616701841354, -0.07738090306520462, 0.08933830261230469, -0.08879414200782776, -0.07415853440761566, 0.00033648102544248104, -0.0554087832570076, 0.023379633203148842, 0.05957391485571861, 0.0006353266071528196, -0.017165811732411385, -0.051515333354473114, 0.06210999935865402, 0.048942338675260544, 0.047055553644895554, 0.0135840168222785, 0.028098657727241516, 0.010742371901869774, -0.021026039496064186, -0.10188982635736465, -0.11311995983123779, -0.13181720674037933];

      let sample5 = [-0.026937037706375122, -0.0021572308614850044, 0.05312865599989891, 0.1172628328204155, 0.0309455469250679, -0.09361554682254791, -0.021283350884914398, 0.1083766371011734, 0.000830797478556633, 0.022108500823378563, 0.033916402608156204, 0.007173765450716019, 0.13135647773742676, 0.011043619364500046, 0.01743723452091217, -0.031018195673823357, -0.007834812626242638, -0.00541264470666647, -0.07550311088562012, 0.03232547268271446, 0.027942638844251633, -0.0018534858245402575, 0.0059764692559838295, -0.046154506504535675, 0.06685478985309601, 0.09990576654672623, 0.035336386412382126, -0.10747964680194855, 0.022914426401257515, 0.0046245139092206955, 0.11556067317724228, -0.03670874238014221, 0.02558446116745472, -0.07257287949323654, -0.01130768097937107, -0.05545962229371071, 0.03513738140463829, -0.010023391805589199, -0.07581514865159988, -0.10129611194133759];

      let sample6 = [0.1014174148440361, 0.014194225892424583, 0.10065913200378418, -0.09215656667947769, 0.12291090190410614, 0.055628228932619095, -0.010067757219076157, -0.14703841507434845, -0.11828994750976562, -0.025230342522263527, -0.03552214428782463, -0.0591585636138916, 0.05116510018706322, 0.04782310128211975, -0.025531096383929253, 0.13565997779369354, -0.05910901725292206, -0.05443727225065231, 0.18239784240722656, 0.011899334378540516, -0.013394440524280071, -0.0520208440721035, -0.07851595431566238, 0.028468072414398193, 0.07594562321901321, 0.0307330209761858, 0.08843150734901428, 0.13823916018009186, -0.09806370735168457, -0.07230526208877563, 0.07127027958631516, -0.037634093314409256, 0.05663585290312767, -0.037963464856147766, -0.14062966406345367, 0.03143228590488434, -0.08705725520849228, 0.14485183358192444, 0.027899349108338356, -0.02104448527097702];

      let sample7 = [-0.029246851801872253, 0.0171704962849617, 0.0725112184882164, 0.04207003489136696, -0.022795723751187325, 0.05376249551773071, 0.11945854127407074, -0.058283645659685135, -0.0674295425415039, 0.012881570495665073, -0.07311509549617767, 0.02282297983765602, 0.019823716953396797, -0.014593277126550674, 0.0681956484913826, -0.13318079710006714, -0.022671950981020927, 0.06815461069345474, -0.013899083249270916, -0.0011245841160416603, 0.05431074649095535, -0.03214171156287193, -0.08435604721307755, 0.032357633113861084, -0.058351293206214905, -0.030712086707353592, 0.03173302859067917, 0.012727905064821243, 0.0330011323094368, 0.010717243887484074, -0.025532608851790428, -0.0008102544816210866, 0.05934172868728638, 0.05196164548397064, -0.028996342793107033, 0.018683914095163345, 0.03857365995645523, -0.008252364583313465, 0.031974028795957565, -0.012303740717470646];


      let sample8 = [0.014121787622570992, -0.006432387512177229, 0.01457929890602827, 0.05586738884449005, 0.024001432582736015, -0.05149725079536438, -0.04966127499938011, 0.00617169588804245, 0.045944537967443466, 0.10954997688531876, 0.02346573770046234, 0.08114594966173172, 0.0018027990590780973, -0.020168473944067955, 0.07326465845108032, -0.0014504393329843879, -0.024715550243854523, 0.030258186161518097, 0.011987103149294853, -0.07743208855390549, 0.018107503652572632, -0.1004551574587822, -0.07551418989896774, 0.05549565702676773, 0.045066941529512405, 0.06597039848566055, -0.049808818846940994, 0.004347759298980236, 0.03191443905234337, 2.754206070676446e-05, -0.05162195488810539, 0.12115371227264404, -0.006236427463591099, -0.030726302415132523, 0.0012904928298667073, -0.010969293303787708, 0.11237215250730515, -0.051425501704216, -0.13731499016284943, 0.03383982554078102];

      let sample9 = [-0.12519922852516174, 0.062396589666604996, -0.07184091210365295, -0.012840935960412025, -0.13699153065681458, -0.06468463689088821, -0.024527329951524734, -0.19984841346740723, 0.05795906111598015, 0.058698564767837524, -0.09502872824668884, -0.06344590336084366, 0.05643175169825554, 0.0034323465079069138, 0.03883020579814911, -0.01026279479265213, 0.18087096512317657, 0.15587788820266724, 0.03461378812789917, 0.18280771374702454, 0.03307007625699043, 0.08977947384119034, 0.06132398545742035, -0.07432571053504944, -0.1889423280954361, 0.056930143386125565, -0.03197934105992317, -0.04497634992003441, -0.07035689800977707, -0.15704625844955444, -0.006845255382359028, -0.040922146290540695, 0.0034432157408446074, 0.0621052160859108, 0.07228174060583115, 0.06377974152565002, -0.036717917770147324, 0.10445907711982727, 0.07360725104808807, 0.04484512284398079];

      let sample10 = [-0.09215392172336578, 0.030851498246192932, 0.014282837510108948, -0.06396526843309402, -0.06653591245412827, -0.00545915775001049, 0.042353663593530655, -0.044287294149398804, 0.02472558803856373, -0.04548191279172897, 0.03146911412477493, -0.07748245447874069, -0.010531020350754261, -0.13233225047588348, -0.007398749236017466, -0.0005030753673054278, 0.0653572827577591, -0.002969859866425395, 0.10876794159412384, 0.039312705397605896, -0.027902591973543167, 0.09275468438863754, -0.1605670154094696, 0.0580320805311203, -0.029798751696944237, -0.04974427819252014, -0.04290055111050606, 0.05096212774515152, -0.001083621522411704, -0.008725063875317574, -0.04249779134988785, 0.03748811408877373, -0.04229162260890007, 0.056585248559713364, 0.09168591350317001, -0.02855014242231846, 0.1352369785308838, -0.03016049973666668, -0.01426669117063284, 0.0581858791410923];

      let samples = [sample1, sample2, sample3, sample4, sample5,
                     sample6, sample7, sample8, sample9, sample10];
      
      let averageFont = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

      let allFonts = samples; 
      for(let i = 0; i < allFonts.length; i++) {
        for(let j = 0; j < allFonts[i].length; j++) {

          averageFont[j] += allFonts[i][j]
        }
      }

      for(let j = 0; j < averageFont.length; j++) {
        averageFont[j] = averageFont[j]/allFonts.length;
      }

      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new(averageFont))) })


      return averageFont;

      console.log("Applied Favorite Font Vector");

    },

    applyBoldingVector() {
      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new([0.053,0.026,-0.060,-0.014,-0.093,-0.018,0.087,0.096,-0.039,0.071,0.111,-0.022,-0.007,0.022,-0.032,0.141,0.126,-0.015,-0.075,0.120,0.068,0.021,0.104,-0.065,-0.085,-0.018,-0.038,-0.059,-0.051,-0.056,0.154,-0.044,-0.116,0.038,-0.144,-0.103,-0.032,0.059,-0.076,-0.030]))) })

      console.log("Applied Bolding Vector");

    },

    applyFatFont() {
      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new([-0.0007701851427555084, 0.06941250711679459, 0.09783592075109482, -0.03060939535498619, -0.02628602646291256, -0.21311190724372864, 0.031185472384095192, 0.12362920492887497, 0.08280093222856522, 0.01663331128656864, 0.1461283415555954, -0.07000420987606049, -0.11422136425971985, 0.06750133633613586, 0.18435847759246826, -0.10587502270936966, -0.09781662374734879, 0.04559413343667984, 0.03465224429965019, -0.02025081403553486, -0.053290434181690216, -0.1930931657552719, 0.16856205463409424, -0.1647011935710907, 0.16856072843074799, 0.09088203310966492, -0.03295985236763954, 0.12444353103637695, -0.1404169648885727, 0.13263729214668274, 0.0442788265645504, -0.12821747362613678, -0.10935047268867493, 0.07594890892505646, 0.14076349139213562, -0.06370256096124649, -0.11337161064147949, 0.023197967559099197, 0.21721021831035614, -0.03767824545502663]))) })

      console.log("Applied Fat Vector");

    },

    applyLowerCase() {
      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new([0.03504293039441109, -0.06314657628536224, 0.02672724425792694, 0.030457520857453346, -0.18297931551933289, 0.14313624799251556, -0.1023659035563469, 0.019856104627251625, 0.049657128751277924, -0.061384961009025574, -0.004852185491472483, 0.04570014774799347, -0.08598329871892929, 0.10228771716356277, 0.15017275512218475, -0.12896661460399628, 0.026504701003432274, 0.1309410035610199, -0.03026803955435753, -0.14287449419498444, -0.18616674840450287, -0.15845634043216705, -0.08823854476213455, 0.012998017482459545, 0.04260152205824852, 0.012184585444629192, -0.03170270845293999, -0.0066749462857842445, 0.19656911492347717, -0.10907480120658875, -0.04453403875231743, 0.05645107477903366, -0.06530680507421494, -0.037183329463005066, 0.16414067149162292, 0.13850046694278717, -0.0309966579079628, -0.03448621183633804, 0.049198683351278305, 0.11198937892913818]))) })

      console.log("Apply Lower Case Vector");

    },
    applyThinAverageFont() {
      this.thinAverageFont(1);
    },

    thinAverageFont(bool) {
      let sample1 = [-0.01868225261569023, 0.059654589742422104, 0.025280173867940903, -0.03145048767328262, 0.0722682774066925, 0.04275071993470192, -0.0036469190381467342, 0.02742970548570156, -0.15763497352600098, 0.05883809179067612, -0.13684503734111786, 0.07139348238706589, -0.030974553897976875, -0.031470704823732376, 0.08490154147148132, -0.13089892268180847, -0.11099330335855484, -0.09207772463560104, -0.030379794538021088, -0.16027510166168213, 0.008202536962926388, -0.13719017803668976, 0.02772647887468338, 0.017341768369078636, 0.05161570757627487, -0.13081790506839752, -0.07030128687620163, 0.043110284954309464, -0.08440794795751572, -0.07831184566020966, -0.05410264804959297, 0.07939006388187408, 0.03232857212424278, 0.058804191648960114, -0.0712006688117981, 0.041353531181812286, 0.11163588613271713, -0.039996277540922165, -0.08211009949445724, 0.0696587935090065];

      let sample2 = [-0.040558554232120514, -0.08776195347309113, 0.04897128418087959, 0.07650710642337799, -0.009156144224107265, 0.0643106997013092, -0.06818843632936478, 0.039951641112565994, 0.10878896713256836, 0.041277166455984116, 0.03735247254371643, 0.0027772276662290096, 0.0932886004447937, 0.04900321736931801, 0.05470183864235878, -0.08272923529148102, -0.14211967587471008, 0.02836468443274498, -0.04258374497294426, 0.013221349567174911, -0.011510639451444149, -0.1142449602484703, 0.0019860542379319668, 0.01698433980345726, 0.02912825159728527, 0.021123260259628296, -0.08997549116611481, -0.16105906665325165, 0.012387095019221306, 0.046123404055833817, 0.04489738494157791, 0.018513033166527748, -0.14482708275318146, 0.06436458975076675, 0.053283434361219406, 0.20101723074913025, -0.008733054623007774, 0.0491163544356823, -0.0375787690281868, -0.036953896284103394];

      let sample3 = [-0.03822416067123413, 0.013566473498940468, -0.00233396771363914, 0.08087408542633057, 0.02146717719733715, -0.021128615364432335, 0.02541145123541355, 0.02671930566430092, 0.054216787219047546, -0.026318740099668503, 0.03868325427174568, 0.013193096965551376, 0.09030687808990479, -0.021591555327177048, 0.10313445329666138, -0.08689990639686584, -0.15017002820968628, -0.057483650743961334, -0.0012220406206324697, -0.03843722864985466, -0.013178760185837746, -0.117881640791893, -0.032402340322732925, 0.02330033853650093, 0.12284164130687714, -0.006728581618517637, -0.011628200300037861, -0.09760666638612747, 0.08900686353445053, -0.026347661390900612, 0.17393597960472107, 0.06565577536821365, 0.018400514498353004, -0.07307028770446777, -0.022472010925412178, 0.08327610790729523, 0.05375850200653076, -0.01616264320909977, -0.05109350010752678, -0.04789724200963974];

      let sample4 = [0.024497557431459427, -0.05211939662694931, 0.03401193767786026, 0.037806056439876556, -0.07064754515886307, 0.05758791044354439, -0.009695334360003471, -0.010294354520738125, 0.04455834627151489, 0.04334162548184395, -0.057432640343904495, 0.025209639221429825, 0.014139297418296337, -0.012375042773783207, 0.01281571015715599, -0.0024682958610355854, -0.2322443425655365, -0.09598832577466965, -0.0005545135936699808, -0.10311664640903473, -0.11689366400241852, -0.10096340626478195, 0.02441004477441311, 0.09254682809114456, 0.0363771878182888, 0.00957498699426651, -0.03422181308269501, -0.09998049587011337, 0.1316879838705063, 0.04047074168920517, 0.08371349424123764, 0.03441498056054115, -0.08241524547338486, 0.028380012139678, 0.10725962370634079, -0.007511578965932131, -0.006494415458291769, -0.03241707757115364, -0.01370028406381607, -0.02758743055164814];

      let sample5 = [0.015577166341245174, -0.013465170748531818, 0.05195929855108261, 0.0017149157356470823, 0.002733828267082572, -0.021583573892712593, -0.0016722530126571655, -0.007365342229604721, 0.07379472255706787, -0.021420618519186974, -0.06563097983598709, 0.007975572720170021, 0.04314551129937172, 0.04871518537402153, 0.005971282254904509, -0.08827360719442368, -0.04799257963895798, -0.017830293625593185, 0.05366380512714386, -0.062145378440618515, -0.0699947327375412, -0.11862239241600037, -0.06528908759355545, 0.07716304063796997, 0.10257253795862198, -0.026628633961081505, -0.025388795882463455, -0.026557860895991325, 0.018427321687340736, 0.0711306482553482, 0.0017810529097914696, -0.04732942581176758, 0.00961317215114832, -0.029890941455960274, 0.0031348129268735647, 0.04904292896389961, 0.0004770575906150043, -0.05071552097797394, -0.03360501676797867, 0.060712993144989014];

      let sample6 = [0.008797445334494114, 0.06941381096839905, 0.1073637530207634, 0.0015949634835124016, -0.04648464545607567, -0.011832524091005325, 0.004110523499548435, 0.025654267519712448, 0.007318205665796995, 0.02443685382604599, 0.01953865960240364, -0.02092517353594303, 0.019313065335154533, 0.03353206440806389, 0.015793927013874054, -0.09558483958244324, -0.12201002240180969, -0.08537810295820236, 0.011534728109836578, -0.03618732839822769, 0.02983412891626358, -0.17394621670246124, 0.02323192171752453, -0.022567836567759514, -0.022274527698755264, 0.03607803210616112, -0.10720201581716537, -0.043900005519390106, -0.06389341503381729, 0.009647941216826439, 0.08595380932092667, 0.07979244738817215, -0.055674437433481216, 0.01674344576895237, 0.047874566167593, 0.09537703543901443, 0.03188248723745346, 0.038246337324380875, -0.18523681163787842, -0.12102782726287842];

      let sample7 = [0.04989755526185036, -0.01299059484153986, 0.028518935665488243, 0.09215082228183746, -0.07151252776384354, 0.10150142014026642, -0.0856395959854126, 0.006469309329986572, 0.06992317736148834, 0.02500299923121929, 0.052244048565626144, 0.04867253080010414, 0.013852628879249096, 0.016721241176128387, 0.06497765332460403, -0.1286446750164032, -0.13873346149921417, -0.0755041316151619, -0.0026700161397457123, -0.06957388669252396, -0.03493039682507515, -0.12703301012516022, -0.040697116404771805, -0.02605278789997101, 0.043264877051115036, 0.005079671740531921, -0.08950498700141907, 0.027872534468770027, 0.05894295126199722, -0.008200976997613907, 0.048098187893629074, 0.02308056689798832, -0.02906845696270466, 0.10039539635181427, -0.020685741677880287, 0.09270904213190079, 0.08310852944850922, -0.004941081628203392, -0.1566493809223175, 0.05014372989535332];

      let sample8 = [0.010567950084805489, -0.006554977037012577, 0.10103488713502884, 0.01674591191112995, -0.009283751249313354, -0.0369415208697319, -0.040449053049087524, -0.007393226493149996, 0.08430234342813492, -0.06753416359424591, -0.004543388728052378, -0.011531610041856766, -0.01916957087814808, 0.012304740957915783, 0.04402764514088631, -0.025972282513976097, -0.12879328429698944, -0.05439768731594086, -0.014377051964402199, -0.042636673897504807, -0.08198382705450058, -0.148627370595932, -0.022059442475438118, 0.030399590730667114, 0.08592239022254944, 0.005607589613646269, -0.041663758456707, -0.02955140359699726, 0.07983139157295227, -0.05099298059940338, 0.028582490980625153, 0.057144246995449066, -0.06581240892410278, -0.044700585305690765, 0.045351702719926834, 0.062491998076438904, 0.027710923925042152, 0.03237055987119675, 0.02395670861005783, 0.05225103348493576];

      let sample9 = [-0.024937491863965988, -0.07569469511508942, 0.17563234269618988, 0.02485501393675804, -0.029360290616750717, 0.04462713748216629, 0.052044037729501724, 0.03997303545475006, 0.06305816024541855, 0.024929432198405266, -0.09109586477279663, 0.15159760415554047, 0.06803084164857864, 0.05907101184129715, 0.0014358569169417024, -0.0853133425116539, -0.03934664651751518, -0.07019435614347458, 0.05288815125823021, -0.05420676991343498, -0.06877528131008148, -0.14873003959655762, -0.02186701074242592, 0.021507710218429565, 0.008915460668504238, 0.10117294639348984, -0.09724152833223343, -0.06489884108304977, 0.021956181153655052, -0.08942954242229462, 0.033881742507219315, 0.050175320357084274, -0.0332823172211647, -0.04492896795272827, -0.0894620418548584, 0.1059085950255394, -0.0034140574280172586, 0.05150797963142395, -0.11970888078212738, -0.01194649375975132];

      let sample10 = [-0.03163594380021095, 0.021012689918279648, 0.14234891533851624, 0.09428827464580536, -0.11052610725164413, 0.02828993648290634, -0.02586437575519085, 0.10246029496192932, 0.0645308867096901, 0.052677053958177567, -0.009386690333485603, 0.07850761711597443, 0.11043065786361694, 0.015802502632141113, -0.002372386399656534, -0.011086533777415752, -0.05305653437972069, -0.10291057080030441, 0.016193322837352753, -0.005879303440451622, -0.07500137388706207, -0.01638459786772728, -0.020162433385849, 0.04060386121273041, 0.024625686928629875, 0.07931531220674515, 0.008788135834038258, -0.08937882632017136, 0.09636592119932175, 0.010643797926604748, 0.10623297840356827, 0.026786521077156067, -0.07032796740531921, -0.06197793409228325, -0.021551627665758133, 0.08387758582830429, 0.09273021668195724, -0.01396727841347456, -0.18416613340377808, -0.013030964881181717];

      let samples = [sample1, sample2, sample3, sample4, sample5,
                     sample6, sample7, sample8, sample9, sample10];
      
      let averageFont = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

      let allFonts = samples; 
      for(let i = 0; i < allFonts.length; i++) {
        for(let j = 0; j < allFonts[i].length; j++) {

          averageFont[j] += allFonts[i][j]
        }
      }

      for(let j = 0; j < averageFont.length; j++) {
        averageFont[j] = averageFont[j]/allFonts.length;
      }

      if(bool == 1) {

      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new(averageFont))) })

      }

      return averageFont;

      console.log("Applied Thinning Vector");

    },

    applyBoldAverageFont() {
      this.boldAverageFont(1);
    },

    boldAverageFont(bool) {

      let sample1 = [0.11249981820583344, -0.06870003789663315, 0.010974748991429806, 0.06396950781345367, 0.008748414926230907, 0.005452724173665047, -0.002893279306590557, 0.08654982596635818, -0.004268372897058725, 0.17884424328804016, 0.003899496514350176, 0.0114789679646492, -0.10728588700294495, 0.037284139543771744, 0.08800894021987915, -0.018506910651922226, 0.0015087563078850508, 0.06120321899652481, -0.05864410474896431, 0.18995633721351624, 0.249693363904953, 0.1292288452386856, -0.0482635460793972, -0.0859716534614563, -0.08926466107368469, 0.15982376039028168, -0.005292871966958046, -0.20101158320903778, 0.09468626230955124, 0.057273056358098984, 0.021590478718280792, -0.11049360036849976, -0.102546826004982, 0.0963033065199852, -0.08368390798568726, 0.17468324303627014, 0.06260496377944946, -0.04269814118742943, -0.15237712860107422, 0.022419143468141556];

      let sample2 = [0.014904155395925045, -0.10480081290006638, -0.03250061348080635, 0.09148763865232468, 0.0936380922794342, 0.01578943245112896, 0.023443639278411865, 0.021504497155547142, 0.0008514687651768327, 0.03340994566679001, -0.037244684994220734, 0.10112520307302475, 0.16425549983978271, 0.05227918177843094, 0.0491107702255249, -0.06435972452163696, 0.003707067109644413, 0.03625216335058212, -0.05348048359155655, 0.06023760885000229, 0.07326588779687881, -0.01624467968940735, 0.017628297209739685, 0.056154992431402206, 0.024735454469919205, -0.0758896917104721, 0.11442478001117706, 0.03806360065937042, 0.02088654786348343, 0.025564774870872498, 0.08406960964202881, -0.013471540063619614, 0.07572241872549057, -0.1384505331516266, -0.10521329194307327, -0.030437277629971504, -0.09248223155736923, -0.1349838823080063, 0.11004440486431122, -0.03185306861996651];

      let sample3 = [0.03580788895487785, 0.01972022093832493, -0.1273203194141388, -0.13871407508850098, 0.17216767370700836, -0.13796986639499664, 0.09371668100357056, -0.05238382890820503, -0.24448715150356293, 0.07704895734786987, -0.0557088628411293, 0.13887135684490204, 0.14224447309970856, -0.06701130419969559, -0.009290744550526142, 0.1560126394033432, 0.20156729221343994, 0.046141620725393295, 0.1570618897676468, 0.17851513624191284, 0.12522496283054352, 0.2792266011238098, 0.07803577184677124, 0.06322287023067474, -0.23827549815177917, -0.07995828986167908, 0.12307288497686386, 0.023780925199389458, -0.20525260269641876, 0.035433508455753326, 0.033563144505023956, 0.1393681913614273, 0.23012006282806396, -0.07055802643299103, -0.032869547605514526, -0.01732424832880497, -0.2592230439186096, 0.08224774897098541, 0.2783067524433136, 0.14533458650112152];

      let sample4 = [0.03701595962047577, -0.048810478299856186, -0.05999799817800522, 0.015788085758686066, -0.011590028181672096, -0.018934721127152443, -0.006391259375959635, -0.11135952174663544, -0.12309577316045761, 0.06450964510440826, 0.015043473802506924, 0.11593464761972427, -0.010284096002578735, 0.06244468316435814, -0.009396584704518318, 0.020996473729610443, 0.05838128924369812, -0.02136593498289585, -0.014013000763952732, 0.09972833842039108, 0.022557983174920082, 0.11698390543460846, -0.06645787507295609, -0.04903807118535042, 0.05388439819216728, -0.1240299716591835, -0.1442118138074875, -0.04281390830874443, 0.0072204251773655415, 0.04632066935300827, -0.03810780122876167, -0.07947232574224472, -0.007944597862660885, 0.003484816523268819, 0.02526661939918995, 0.055400364100933075, -0.06736469268798828, -0.03819922357797623, 0.18662849068641663, 0.030763600021600723];

      let sample5 = [0.17604708671569824, 0.0048106820322573185, 0.003392306389287114, -0.283683717250824, -0.1682804524898529, 0.021898780018091202, -0.11687980592250824, -0.17599858343601227, 5.3795738494955e-05, 0.09562373161315918, 0.028616977855563164, -0.016568392515182495, -0.02814107947051525, -0.028763053938746452, -0.03088401071727276, 0.24131767451763153, 0.05721424147486687, 0.06682458519935608, 0.03201424330472946, 0.10583004355430603, 0.08416122943162918, 0.11503377556800842, 0.2311854213476181, -0.03643792122602463, -0.318564772605896, 0.018058041110634804, -0.08993158489465714, 0.10680614411830902, -0.1492806375026703, 0.003392261452972889, 0.1669096201658249, 0.043839503079652786, 0.008804794400930405, -0.005035950802266598, -0.11148066073656082, -0.08659043163061142, -0.17960870265960693, 0.056817926466464996, 0.0686056911945343, -0.2808796763420105];

      let sample6 = [0.1479438692331314, -0.033234626054763794, -0.06320744007825851, -0.07694549113512039, -0.1408843696117401, 0.12297789752483368, -0.08544016629457474, -0.11032750457525253, -0.03919745981693268, 0.05381256341934204, 0.02774573117494583, -0.08580444753170013, -0.14679600298404694, -0.01942855305969715, -0.09352894127368927, -0.004843680653721094, 0.06192829832434654, 0.20962756872177124, -0.016660694032907486, 0.16265282034873962, 0.05769040063023567, 0.2225950062274933, 0.06393361836671829, -0.11655519902706146, -0.25644662976264954, -0.025377808138728142, -0.18011562526226044, 0.05310850962996483, 0.05400276184082031, 0.037371110171079636, 0.010353256948292255, 0.07916826754808426, -0.09096040576696396, 0.04994375258684158, -0.12294832617044449, -0.08980074524879456, 0.0056307027116417885, 0.060972172766923904, 0.08535728603601456, -0.08694171905517578];

      let sample7 =  [0.19142064452171326, -0.10869915783405304, -0.06224818527698517, -0.07657257467508316, -0.029916197061538696, -0.002507567871361971, 0.0625595897436142, -0.021279022097587585, -0.10387250781059265, 0.052168138325214386, 0.05926366522908211, 0.07851135730743408, -0.03720130771398544, 0.062492623925209045, -0.04146871343255043, 0.043491002172231674, 0.09145841747522354, 0.2964146137237549, -0.044493865221738815, 0.17901405692100525, 0.0264895036816597, 0.3692033290863037, 0.058692920953035355, -0.01879681460559368, -0.2653596103191376, 0.04034097120165825, -0.01792399398982525, 0.060823723673820496, 0.07269789278507233, 0.10785287618637085, -0.2643275260925293, -0.142835333943367, 0.01740499958395958, -0.0567936897277832, 0.05615007132291794, -0.13173897564411163, -0.0557250939309597, 0.13087667524814606, 0.15755745768547058, 0.07525095343589783];

      let sample8 = [0.2941054403781891, -0.03582190349698067, -0.21793943643569946, -0.07671505957841873, 0.13284486532211304, -0.2441186010837555, 0.04958772286772728, -0.12393829226493835, -0.11464088410139084, 0.05577981472015381, -0.1326843947172165, 0.14756394922733307, -0.0977998897433281, -0.15350060164928436, 0.1637551337480545, 0.09180603176355362, 0.10026495903730392, 0.30790114402770996, 0.010743836872279644, 0.14481788873672485, 0.16589844226837158, 0.25748518109321594, -0.003666406963020563, -0.19438688457012177, -0.1999487280845642, -0.20132195949554443, 0.14049872756004333, 0.1642545759677887, -0.25930842757225037, 0.06165866553783417, -0.0832337737083435, -0.12808442115783691, 0.31277304887771606, -0.054146092385053635, -0.08343514055013657, 0.07074815034866333, -0.21000900864601135, 0.08085948973894119, 0.21757526695728302, 0.00957223679870367];

      let sample9 = [0.07712924480438232, -0.019491583108901978, -0.05526923015713692, -0.12573309242725372, 0.062205441296100616, -0.009518931619822979, -0.09488872438669205, -0.1565077304840088, -0.034736018627882004, -0.044942814856767654, -0.0946958065032959, -0.07387352734804153, -0.1649240255355835, -0.0903787687420845, -0.022088337689638138, 0.05791081488132477, 0.22785460948944092, 0.14740024507045746, 0.060068096965551376, 0.11917424947023392, 0.12009595334529877, 0.14356420934200287, -0.11346960812807083, -0.0867757499217987, -0.20894105732440948, 0.022917229682207108, 0.06040020287036896, 0.08960947394371033, 0.12587881088256836, -0.012228749692440033, -0.15154096484184265, -0.009862499311566353, 0.057819850742816925, -0.15154269337654114, 0.007130298763513565, -0.1699339598417282, 0.14771707355976105, -0.10519417375326157, 0.20426161587238312, 0.13204367458820343];

      let sample10 = [0.039126235991716385, 0.1108749657869339, 0.028960229828953743, 0.022800425067543983, 0.13767214119434357, -0.024908114224672318, -0.06385470181703568, 0.19904841482639313, -0.09287494421005249, -0.021391354501247406, -0.13362456858158112, 0.12076035141944885, 0.07927251607179642, -0.04606754705309868, -0.1556663066148758, -0.04999551549553871, -0.1155671700835228, -0.061415091156959534, 0.006635608151555061, -0.04655101150274277, 0.1424756795167923, 0.08619942516088486, 0.14477413892745972, 0.08568918704986572, -0.023896392434835434, -0.03897315263748169, 0.21831034123897552, 0.021949730813503265, -0.10605223476886749, -0.02671554498374462, 0.1102512925863266, -0.12984968721866608, 0.10139215737581253, 0.1021798700094223, -0.1311158537864685, -0.0619712732732296, 0.049106452614068985, -0.0490778423845768, 0.10483040660619736, -0.059169702231884];

      let samples = [sample1, sample2, sample3, sample4, sample5,
                     sample6, sample7, sample8, sample9, sample10];
      
      let averageFont = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

      let allFonts = samples; 
      for(let i = 0; i < allFonts.length; i++) {
        for(let j = 0; j < allFonts[i].length; j++) {

          averageFont[j] += allFonts[i][j]
        }
      }

      for(let j = 0; j < averageFont.length; j++) {
        averageFont[j] = averageFont[j]/allFonts.length;
      }


      if(bool == 1) {


      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new(averageFont))) })

      }
      return averageFont;

      console.log("Applied Average Bold Vector");

    },


    applyBoldNoBoldAverage() {

      let boldAverage = this.boldAverageFont(0);
      let thinAverage = this.thinAverageFont(0);

      console.log(boldAverage);

      console.log(thinAverage);

      for(let i = 0; i < boldAverage.length; i++) {

      boldAverage[i] -= thinAverage[i]

      }

      this.$emit("select", { selectedSample:
           math.add(this.selectedSample, this.model.fixdim(
               Array1D.new(boldAverage))) })

      console.log("Applied Bold/No-Bold Vector");      

    
    },

  },
  watch: {
    model: function(val) {
      for (let i = 0; i < this.vectors.length; ++i) {
        let arr = this.vectors[i].text.split(',');
        if (arr.length > this.model.dimensions) {
            arr = arr.slice(0, this.model.dimensions);
        }
        while (arr.length < this.model.dimensions) {
            arr.push('0');
        }
        this.vectors[i].text = arr.join(',');
      }
    }
  },
}
</script>

<style scoped>
.vector, .operation {
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  white-space: nowrap;
}

</style>
